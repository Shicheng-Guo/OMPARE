pdacData[1:5,1:5]
myVar <- "AJCC_METASTASIS_PATHOLOGIC_PM";
tmpData <- pdacData[,c(myGroup, myVar)]
tmpData <- table(tmpData);
tmpOut <- chisq.test(tmpData);
tmpOut[[4]]
tmpOut[[3]]
tmpOut[[2]]
tmpOut[[1]]
allCols <- colnames(myData);
myData <- pdacData
allCols <- colnames(myData);
allCols
myGroupColumn <- "Group"
allCols <- setdiff(colnames(myData),myGroupColumn) ;
allCols
myGroup
i=1
getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
#Get P-value from Pearson Chi-Square statistic
getChiSqPVal <- function(myGroup=NULL, myVar=NULL, myData=NULL)
{
tmpData <- pdacData[,c(myGroup, myVar)]
tmpData <- table(tmpData);
tmpOut <- chisq.test(tmpData);
out <- c(tmpOut[[4]], tmpOut[[1]], tmpOut[[3]])
names(out) <- c("Name" , "Stat", "P-val")
}
#Get P-value from Kruskal-Wallis Test
getKruskalPVal <- function(myGroup=NULL, myVar=NULL, myData=NULL)
{
tmpData <- pdacData[,c(myGroup, myVar)]
tmpOut <- kruskal.test(tmpData[,myVar], g=factor(tmpData[,myGroup]));
out <- c(tmpOut[[4]], tmpOut[[1]], tmpOut[[3]])
names(out) <- c("Name", "Stat", "P-val")
}
allCols[i]]
allCols[i]
class(myData[,allCols[i]])=="numeric"
class(myData[,allCols[i]])
class(myData[,allCols[2]])
class(myData[,allCols[3]])
class(myData[,allCols[4]])
sapply(myData, FUN=class)
resultList <- list()
for(i in length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList$allCols[i] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList$allCols[i] <-tmpOut;
}
}
allCols <- setdiff(colnames(myData),myGroup) ;
resultList <- list()
for(i in length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
resultList
allCols <- setdiff(colnames(myData),myGroup) ;
resultList <- list()
for(i in 1:length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
allCols <- setdiff(colnames(myData),myGroup) ;
resultList <- list()
for(i in 1:length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
print(allCols[i]);
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
print(allCols[i]);
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
myData[,"LONGEST_DIMENSION"]
excludeCols <- "LONGEST_DIMENSION"
allCols <- setdiff(colnames(myData),c(myGroup, excludeCols)) ;
resultList <- list()
for(i in 1:length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
print(allCols[i]);
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
print(allCols[i]);
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
SHORTEST_DIMENSION,
excludeCols <- c("LONGEST_DIMENSION", "SHORTEST_DIMENSION")
excludeCols
allCols <- setdiff(colnames(myData),c(myGroup, excludeCols)) ;
resultList <- list()
for(i in 1:length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
print(allCols[i]);
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
print(allCols[i]);
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
excludeCols <- c("LONGEST_DIMENSION",
"SHORTEST_DIMENSION",
"SPECIMEN_SECOND_LONGEST_DIMENSION")
allCols <- setdiff(colnames(myData),c(myGroup, excludeCols)) ;
resultList <- list()
for(i in 1:length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
print(allCols[i]);
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
print(allCols[i]);
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
resultList
#Get P-value from Pearson Chi-Square statistic
getChiSqPVal <- function(myGroup=NULL, myVar=NULL, myData=NULL)
{
tmpData <- pdacData[,c(myGroup, myVar)]
tmpData <- table(tmpData);
tmpOut <- chisq.test(tmpData);
out <- c(tmpOut[[4]], tmpOut[[1]], tmpOut[[3]])
}
#Get P-value from Kruskal-Wallis Test
getKruskalPVal <- function(myGroup=NULL, myVar=NULL, myData=NULL)
{
tmpData <- pdacData[,c(myGroup, myVar)]
tmpOut <- kruskal.test(tmpData[,myVar], g=factor(tmpData[,myGroup]));
out <- c(tmpOut[[4]], tmpOut[[1]], tmpOut[[3]])
}
allCols <- setdiff(colnames(myData),c(myGroup, excludeCols)) ;
resultList <- list()
for(i in 1:length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
print(allCols[i]);
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
print(allCols[i]);
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
resultList
resultList <- data.frame(resultList)
[1:5,]
resultList
#Generate P-Value Table
getPValueTable <- function(myData=NULL, myGroup=NULL, excludeCols=NULL)
{
allCols <- setdiff(colnames(myData),c(myGroup, excludeCols)) ;
resultList <- list()
for(i in 1:length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
print(allCols[i]);
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
print(allCols[i]);
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
resultsDF <- data.frame(resultList);
resultsDF <- data.frame(t(resultsDF));
return(resultDF);
}
#Determine columns you don't care about
excludeCols <- c("LONGEST_DIMENSION",
"SHORTEST_DIMENSION",
"SPECIMEN_SECOND_LONGEST_DIMENSION")
output <- getPValueTable(pdacData, "Group", excludeCols)
#Generate P-Value Table
getPValueTable <- function(myData=NULL, myGroup=NULL, excludeCols=NULL)
{
allCols <- setdiff(colnames(myData),c(myGroup, excludeCols)) ;
resultList <- list()
for(i in 1:length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
resultsDF <- data.frame(resultList);
resultsDF <- data.frame(t(resultsDF));
return(resultDF);
}
#Determine columns you don't care about
excludeCols <- c("LONGEST_DIMENSION",
"SHORTEST_DIMENSION",
"SPECIMEN_SECOND_LONGEST_DIMENSION")
output <- getPValueTable(pdacData, "Group", excludeCols)
allCols <- setdiff(colnames(myData),c(myGroup, excludeCols)) ;
resultList <- list()
for(i in 1:length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
resultsDF <- data.frame(resultList);
dim(resultsDF)
resultsDF
#Generate P-Value Table
getPValueTable <- function(myData=NULL, myGroup=NULL, excludeCols=NULL)
{
allCols <- setdiff(colnames(myData),c(myGroup, excludeCols)) ;
resultList <- list()
for(i in 1:length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
resultsDF <- data.frame(resultList);
resultsDF <- data.frame(t(resultsDF));
return(resultsDF);
}
#Determine columns you don't care about
excludeCols <- c("LONGEST_DIMENSION",
"SHORTEST_DIMENSION",
"SPECIMEN_SECOND_LONGEST_DIMENSION")
output <- getPValueTable(pdacData, "Group", excludeCols)
warnings()
options(warn=-1)
output <- getPValueTable(pdacData, "Group", excludeCols)
output
#Generate P-Value Table
getPValueTable <- function(myData=NULL, myGroup=NULL, excludeCols=NULL)
{
allCols <- setdiff(colnames(myData),c(myGroup, excludeCols)) ;
resultList <- list()
for(i in 1:length(allCols))
{
if(class(myData[,allCols[i]])%in%c("factor", "character"))
{
tmpOut <- getChiSqPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
if(class(myData[,allCols[i]])%in%c("numeric", "integer"))
{
tmpOut <- getKruskalPVal(myGroup=myGroup, myVar=allCols[i], myData=myData)
resultList[[allCols[i]]] <-tmpOut;
}
}
resultsDF <- data.frame(resultList);
resultsDF <- data.frame(t(resultsDF));
resultsDF[,2] <- as.numeric(as.character(resultsDF[,2]))
resultsDF[,3] <- as.numeric(as.character(resultsDF[,3]))
resultsDF <- resultsDF[order(resultsDF[,3]),]
colnames(resultsDF) <- c("Test", "Statistic", "P-value")
return(resultsDF);
}
#Determine columns you don't care about
excludeCols <- c("LONGEST_DIMENSION",
"SHORTEST_DIMENSION",
"SPECIMEN_SECOND_LONGEST_DIMENSION")
output <- getPValueTable(pdacData, "Group", excludeCols)
output
write.table(output, "SummaryPvalueTable.txt", sep="\t", row.names=T)
write.table(output, "~/Desktop/SummaryPvalueTable.txt", sep="\t", row.names=T)
#############################
#Load packages & source-
#############################
library("tidyverse")
source("code/RNASeqAnalysis.R")
source("code/patientSampleInfo.R")
library("tidyverse")
source("./RNASeqAnalysis.R")
source("./patientSampleInfo.R")
source("./RNASeqAnalysis.R")
source("RNASeqAnalysis.R")
getwd()
setwd("~/Documents/Projects/PNOC008/PNOC008_Report_Gen_Proj/Code")
library("tidyverse")
source("./RNASeqAnalysis.R")
source("./patientSampleInfo.R")
#Function to return all results from RNA-Seq Analysis
runRNASeqAnalysis <- function(expData=NULL)
{
#############################
#Load packages & source-
#############################
library("tidyverse")
library("GSVA");
library("GSEABase");
#############################
#-End Load packages & source
#############################
#############################
#Read Data-
#############################
print("Start: Read Data")
#Read GTEx Expression Data
gtexData <- readRDS("../data/Reference/GTEx/GTEx_fullExpr_matrix.RDS");
#Read GTEx Annotation
gtexGeneAnnot <- read.delim("../data/Reference/GTEx/gencode.v23.annotation.gi_ti_gs.txt", stringsAsFactors =F);
##Reference Data
cancerGenes <- read.delim("../data/Reference/CancerGeneList.tsv", stringsAsFactors =F)[,1];
#Hallmark Gene Sets
hallMarkSets <- getGmt("../data/Reference/mSigDB/h.all.v6.2.symbols.gmt", collectionType=BroadCollection(), geneIdType= SymbolIdentifier())
hallMarkSets <- geneIds(hallMarkSets);
print("End: Read Data")
#############################
#-End Read Data
#############################
#############################
#Merge & Normalize Data-
#############################
print("Start: Merge and Normalize Data")
rownames(gtexData) <- gtexData[,1];
gtexData <- gtexData[-1];
rownames(expData) <- expData[,1];
#Merge
mergeDF <- cbind(gtexData, expData[rownames(gtexData),"FPKM"])
#Collapse to Gene
gtexGeneAnnot <- unique(gtexGeneAnnot[1:2])
rownames(gtexGeneAnnot) <- gtexGeneAnnot[,1];
mergeDF <- cbind(gtexGeneAnnot[rownames(mergeDF),2], mergeDF)
mergeDF[,"meanExp"] <- rowMeans(mergeDF[-1]);
mergeDF <- mergeDF[order(-mergeDF[,"meanExp"]),]
mergeDF <- mergeDF[!duplicated(mergeDF[,1]),]
rownames(mergeDF) <- mergeDF[,1];
mergeDF <- mergeDF[-1];
mergeDF <- mergeDF[-ncol(mergeDF)];
colnames(mergeDF)[ncol(mergeDF)]<- "SampleX";
print("Start: Merge and Normalize Data")
#############################
#-End Merge & Normalize Data
#############################
#############################
#Calculate Gene Outliers-
#############################
print("Start: Calculate Outliers")
getAllOutliers <- function(myMergeDF=mergeDF, getTop=20)
{
#FPKM Filter
myMergeDF <- myMergeDF[myMergeDF[,"SampleX"]>20,]
getZ <- function(x)
{
x <- log2(x+1);
out <- (x-mean(x))/sd(x)
return(out[length(out)]);
}
output <- apply(myMergeDF, FUN=getZ, MARGIN=1);
outputCanc <- output[intersect(names(output), cancerGenes)];
outputDown <- sort(outputCanc)[1:getTop];
outputUp <- sort(outputCanc, T)[1:getTop];
outputUpDF <- data.frame(outputUp, myMergeDF[names(outputUp),"SampleX"])
outputDownDF <- data.frame(outputDown, myMergeDF[names(outputDown),"SampleX"])
colnames(outputUpDF) <- c("Z-Score", "FPKM")
colnames(outputDownDF) <- c("Z-Score", "FPKM")
return(list(output, rbind(outputUpDF, outputDownDF)));
}
geneAnalysisOut <- getAllOutliers();
print("End: Calculate Outliers")
#############################
#-End Calculate Gene Outliers
#############################
#############################
#Calculate Pathway Outliers-
#############################
#Currently use Enrichment, but moving forward will use GSVA
print("Start: Pathway Outliers")
#Set Threshold
thresh <- 2
#Get Up and Down Genes
upGenes <- names(geneAnalysisOut[[1]][geneAnalysisOut[[1]]>thresh])
downGenes <- names(geneAnalysisOut[[1]][geneAnalysisOut[[1]]<(-1*thresh)])
#If not enough genes take top 500
if(length(upGenes)<500)
{
upGenes <- names(sort(geneAnalysisOut[[1]], T))[1:500]
}
if(length(downGenes)<500)
{
downGenes <- names(sort(geneAnalysisOut[[1]], F))[1:500]
}
#Code to run pathway analysis
runHypGeom <- function(set, genes,n=20000, universe=NULL)
{
if(!is.null(universe))
{
set <- intersect(set, universe);
}
#number of white balls
x <- length(intersect(genes, set));
#white balls
m <- length(genes);
#black balls
n2 <- n-m;
#balls drawn from the urn
k <- length(set);
out <- phyper(x-1, m, n2, k, lower.tail=F);
setSize <- k;
overLap <- x;
numGenes <- m;
myRet <- c(setSize, numGenes, overLap, out);
return(myRet);
}
#Accessory for functional enrichment
funcEnrichment <- function(genes, sets, qval=.25, numRet=5, myN=20000, myUniverse=NULL)
{
out <- lapply(sets, FUN = runHypGeom, genes = genes, n=myN, universe=myUniverse);
out <- data.frame(out);
out <- data.frame(t(out));
out$ADJ_P_VAL <- p.adjust(out[,4], method="BH");
colnames(out)[1:5] <- c("SET_SIZE", "NUM_GENES_INPUT", "OVERLAP", "P_VAL", "ADJ_P_VALUE");
return(out);
}
upPathways <- funcEnrichment(upGenes, hallMarkSets, qval=1, myN=25000, myUniverse=rownames(mergeDF))
upPathways <- upPathways[order(upPathways[,"P_VAL"]),]
upPathways[,"Direction"] <- "Up"
downPathways <- funcEnrichment(downGenes, hallMarkSets, qval=1, myN=25000, myUniverse=rownames(mergeDF))
downPathways <- downPathways[order(downPathways[,"P_VAL"]),]
downPathways[,"Direction"] <- "Down"
pathwayAnalysisOut <- list(list("UpGenes"=upGenes, "DownGenes"=downGenes), rbind(upPathways, downPathways));
print("End: Pathway Outliers")
#############################
#-End Calculate Pathway Outliers
#############################
#Final Output
finalOut <- list();
finalOut$geneAnalysis <- geneAnalysisOut;
finalOut$pathwayAnalysis <- pathwayAnalysisOut;
return(finalOut);
}
runRNASeqAnalysis
source("./RNASeqAnalysis.R")
source("RNASeqAnalysis.R")
source("./RNASeqAnalysis.R")
ls()
